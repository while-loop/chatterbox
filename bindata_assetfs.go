// Code generated by go-bindata.
// sources:
// www/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4b\x6f\xdc\x36\x10\xbe\x07\xc8\x7f\x98\xb0\x28\xb2\x86\x51\xc9\x46\x1f\x87\xb5\xb4\x87\xba\x01\x52\x20\x45\x0b\xd8\x40\x11\xa4\x39\x50\xe2\xac\xc4\x86\xe2\x08\xe2\x68\xd7\xdb\xc0\xff\xbd\xa0\xb4\xda\x97\xa8\xb5\x13\x44\x87\x7d\x0c\x39\x9c\xef\xfb\x38\xa3\x99\xe4\xd5\x6f\x7f\xde\xde\xbf\xff\xeb\x0d\x94\x5c\x99\xc5\xcb\x17\x89\xff\x06\x23\x6d\x91\x0a\xb4\xa2\xb3\xa0\x54\x8b\x97\x2f\x00\x00\x12\xd6\x6c\x70\x71\x5b\x4a\x66\x6c\x32\x7a\x48\xe2\xde\xb2\x5d\x76\x79\xa3\x6b\x06\xde\xd4\x98\x0a\xc6\x07\x8e\xff\x95\x2b\xd9\x5b\xc5\x76\x93\x7f\xd6\xda\x2a\x5a\x47\x64\x0d\x49\x05\x29\x2c\x5b\x9b\xb3\x26\x0b\xb3\x0b\xf8\xbc\xdf\xe6\x9f\x95\x6c\x20\x27\x6b\x6f\xc6\xe6\xca\x15\x90\x82\xa2\xbc\xad\xd0\x72\x54\x20\xbf\x31\xe8\x7f\xfe\xba\xf9\x5d\xcd\x44\xe5\x0a\x71\x11\x70\x33\x74\xd6\xcd\x50\xef\x76\xec\xb8\x43\x28\xeb\x1a\xad\x7a\x47\xc5\x4c\x33\x56\x23\xb8\x43\x10\x45\x77\x79\x43\xc6\x40\xea\xe3\x45\xae\xfb\x73\x4f\x35\x2c\x0e\xfe\xbf\x45\x5d\x94\x0c\x3f\x74\xa6\xdc\x68\xb4\xbc\x33\x5d\xdf\x8c\x0f\xf6\xdb\xfa\xf8\xb7\xa5\x36\xaa\x47\x10\xd8\xa7\x97\x30\x1b\x00\x04\x11\x0e\x87\xed\x61\xa5\xcf\x81\x15\x08\xf5\x78\x6c\x7a\x3c\xd5\x6d\x52\xe6\x25\x35\x95\xb8\x88\xc8\xba\x36\xab\x34\x9f\x4f\x82\x81\xd4\x2b\x9f\x09\x93\x8c\x1a\xe4\xb6\xb1\xb0\x94\xc6\xe1\xd3\x50\x77\x67\x56\xae\x88\x56\xd2\xb4\xf8\x0d\x0f\xf6\x38\x23\x87\x56\xcd\xf6\xa7\x07\x3c\x77\x8b\x90\x82\x10\x81\x0d\x67\x22\x3f\x8e\x72\xd4\xb3\xe9\x2b\xeb\x83\xf8\x1b\xb3\x3b\xca\x3f\x21\x8b\x8f\x41\x5a\x1e\x20\xa4\x60\x71\x0d\xbb\xad\x33\xb1\x76\xf3\x38\x16\x70\xb9\xbf\x36\x43\xb9\xf4\x97\x12\x95\xe4\x18\x2e\x41\xc4\x79\x29\x79\x54\x57\x3b\xce\x64\x73\x43\x0e\x8f\xae\x13\x57\x3c\x29\xad\xaf\x15\x9f\xc6\x87\x15\x99\x37\x28\x19\xb7\xd9\x32\x13\x4a\xaf\x82\xf1\x3a\xca\x8c\x55\xa4\xad\xc5\xe6\xed\xfd\x1f\xef\xbc\x8a\x49\xb6\xb8\x25\x6b\xb1\x8f\xdd\x81\x51\x51\x12\x67\x8b\x90\xbc\xfe\x39\x29\xe8\xd0\xfd\x4e\x93\xad\xd0\x39\x59\x7c\x19\xdd\xad\x8f\x83\x14\x70\xc5\x91\x92\x2c\x23\x57\x1b\xcd\xb3\xd7\xff\xd8\xd7\x53\x4c\x97\xd4\xc0\xac\x53\x0b\x52\xb8\xba\x01\x0d\xc9\xee\xa4\xc8\xa0\x2d\xb8\xbc\x01\x7d\x79\x39\x19\xfa\x1b\xa8\x7d\xac\xf8\x3d\x3e\xf8\xb2\x1d\x40\x7c\xd0\x1f\xcf\xb8\x3d\xad\x32\x84\x2b\xe9\x54\xfc\x47\x40\xe3\x70\xea\xb5\xfb\x95\xe4\x82\x69\xf4\x9e\xda\x06\xb2\x86\xd6\x0e\xfd\xfb\x1c\x1d\x58\x62\x70\x6d\x5d\x53\xc3\xfb\xaa\x71\x93\xd9\x75\x9e\xf3\x01\xd7\x81\x63\x12\xf7\xad\x72\xd7\x4e\x79\x63\xf0\xb0\x9b\xe6\xce\x1d\xb6\xd1\xae\x57\x9f\x28\x41\x2b\x6c\x96\x86\xd6\x73\x28\xb5\x52\x78\xd8\x37\x8f\x5e\xce\x19\xa9\xcd\x17\xf8\xfa\xa7\x96\x4a\x69\x5b\xcc\xe1\xea\x64\xa1\x92\x4d\xa1\xed\xd8\xbe\xd6\x8a\xcb\x39\x5c\x5f\x5d\x7d\x7f\xb2\x52\x76\xfd\x24\xb8\x94\xc9\xfc\x53\xd1\x50\x6b\xd5\x1c\x8a\x46\x6e\xa6\x08\x7c\xe7\xfb\xf8\xe7\x69\xdf\x75\xa9\xf9\xf4\x9d\x39\x05\x74\xcf\x2c\xfa\x19\xab\xf1\xe7\xe9\x76\x72\xda\xd7\xfa\x1c\x64\xe6\xc8\xb4\xa3\x38\x4c\xf5\x3c\xe8\x69\x70\xc9\xe1\x95\xa6\x17\x24\xb4\x94\x11\x33\x55\x73\xf8\x71\xb4\xb2\xbf\x30\xd9\x32\x4d\x2a\xe5\x7b\xed\xa9\x54\x7b\xca\x03\xd1\x60\xec\x49\xc5\x9e\x92\x60\x00\x7d\x3d\xa5\x41\xfd\xf0\xec\x6c\x79\x4e\x4e\x27\x71\x57\x2d\x7e\x60\x8d\xb7\x13\x6b\xe2\x73\xdc\x7f\x2b\xbd\x02\xad\xd2\x6e\xb4\x5b\x24\xb1\xd2\x2b\x6f\xed\x54\xf1\xe6\x6e\x14\x19\x6a\x4e\xdb\xba\x1d\x26\xd8\x7e\x34\x11\xd0\xb5\xe8\x54\xdc\xa1\x55\x02\xe2\xd0\x4e\x5f\x9d\xa2\x3b\xcc\x4f\x9d\xe0\xf4\x7f\x98\x8a\x5f\x7e\x12\x71\x87\xc7\x07\xe8\x7e\x0c\x80\xe2\x6e\xda\xfe\x3f\x00\x00\xff\xff\x71\x49\xc1\x21\x7d\x0b\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 2941, mode: os.FileMode(436), modTime: time.Unix(1518224495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
